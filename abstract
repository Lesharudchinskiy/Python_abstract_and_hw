# В переменных хранится знаечение (данные , связанные с переменной)
# Строка представляет собой простую последовательность символов , любая последовательность в ковычках является строкой
# Метод - это дейтсвие, которые выполняется с данными
# Метод name.title() - Преобразует первый символ каждого слова к строке к верхнему регистру.
# Метод name.upper() - Все буквы заглавные
# Метод name.lower() - Все буквы в нижнем регистре (не меняет изначального значения переменной)
# Конкатенация - Объединение строк знаком +:
#         f_name = "vasya"
#         l_name = "Sidorenko"
#         f_name = f_name.title() + " " + l_name
#         print(f_name)

#  "\t" - строка с табуляцией (print("\tPython")
#  "\n" - строка с пропуском строки (print("\nPython")
#
# Метод name.rstrip() - удалить пропуски у правого края
# Метод name.lstrip() - удалить пропуски у левого края
# Метод name.strip() - удалить пропуски с обоих концов
# Ф-ия str() - преобразует нестроковые знаения в строку
# Ф-ия int() - преобразует нецельночисленные знаения в целые числа
#
#   ZEN OF PYTHON    import this
#
# Список - упорядоченный набор данных (набор элементов , следующих в определенном порядке)
#
#   bikes=['trek','shkolnik','kuzya']
#   print(bikes[0].title())
#   out: Trek
#
# Чтобы запросить последний элемент по индексу - необходимо : bikes[-1]
#
# Замена элемента списка : bikes[0] = 'scout'
#                          print(bikes)
#                          bikes=['scout','shkolnik','kuzya']
#
# Добавление элемента в конец список методом .append()    список.append("что добавить"):
#                               bikes.append('vas')
#                               print(bikes)
#                          out: ['scout', 'shkolnik', 'kuzya', 'vas']
#
# Вставка элемента в список методом insert()  список.insert(позиция, "что вставить"):
#                                             moto = ["honda", "yamaha", "suzuki"]
#                                             moto.insert(0, 'ducati')
#                                             print(moto)
#                                       out:  ['ducati', "honda", "yamaha", "suzuki"]
#
# Удаление элементов из списка командой del - позволяет удалить  из любой позиции , если известен его индекс, удаленное
# значение становится недоступным!
#                              moto = ["honda", "yamaha", "suzuki"]
#                              del moto[1]
#                              print(moto)
#                         out: ["honda", "suzuki"]
#
# Удаление элемента с использованием метода pop    список.pop()  - удаляет последний элемент из списка, но позволяет
# работать с ним после удаления:
#                            moto = ["honda", "yamaha", "suzuki"]
#                            popped_moto = moto.pop()
#                            print(moto)
#                            print(popped_moto)
#                       out: ["honda", "yamaha"]
#                            "suzuki"
# -Метод .pop() можно использовать для удаления любого элемента по позиции из списка , для этого нужно написать:
# список.pop(позиция в списке)
#
# Если нужно просто удалить элемент из списка , никак его не используя в дальнейшем - команда del !
# Если нужно использовать элемент после удаления из списка - метод .pop()!
#
# Удаление элементов по значению методом remove()  список.remove("значение" или переменная)
#                              moto = ["honda", "yamaha", "suzuki"]
#                              moto.remove("honda")
#                              print(moto)
#                         out: ["yamaha", "suzuki"]
#
#  remove удаляет только первое вхождение заданного значения из списка (чтобы удалить все вхождения ,
#  необходимо использовать циклы)
#
# УПОРЯДОЧЕНИЕ СПИСКА:
#
# метод sort()    список.sort()     - метод ПОСТОЯННОЙ сортировки списка по алфавиту ;
#                 список.sort(reverse=True - в обратном порядке)
#
#                  auto = ["bmw", "audi", "subaru"]
#                  auto.sort()
#                  print(auto)
#             out: ["audi", "bmw", "subaru"]
#
# Функция sorted() - позволяет представить список в определеннном порядке, НО НЕ ИЗМЕНЯЕТ ФАКТИЧЕСКОГО ПОРЯДКА элементов
# в списке. (ВРЕМЕНННАЯ СОРТИРОВКА СПИСКА)
#                    sorted(список, reverse=True - в обратном порядке)
#
#                   car = ["bmw", "audi", "toyota", "subaru"]
#                   print(car)
#                   print(sorted(car))
#                   print(car)

#               out:   ['bmw', 'audi', 'toyota', 'subaru']
#               out:   ['audi', 'bmw', 'subaru', 'toyota']  - ВРЕМЕННЫЙ алфавитный порядок
#               out:   ['bmw', 'audi', 'toyota', 'subaru']
#
#
# Метод reverse()     список.reverse()- осуществляет ПОСТОЯННОЕ изменение порядка элементов, но можно вернуться к
# исходному списку,снова применив reverse()   (НЕ АЛФАВИТНОМ)
#
#                cars = ["bmw", "audi", "toyota", "subaru"]
#                print(cars)
#                cars.reverse()
#                print(cars)
#
#             out:   ['bmw', 'audi', 'toyota', 'subaru']
#             out:   ['subaru', 'toyota', 'audi', 'bmw']
#
# Функция len() - позволяет определить длину списка.
#
#              cars = ["bmw", "audi", "toyota", "subaru"]
#              print(len(cars))
#
#             out:    4
#
#  Цикл for - используется для каждого ОЧЕРЕДНОГО элемента списка, и взятый элемент сохраняется в переменную, когда
# элементы в списке заканчиваются - Python переходит к след стороке программы или завершится (если строк нет).
#
#  Функция range(А, В, С) - построение числовых значений от А до В (не включительно) с шагом С (если он задан)
#
#       range для создания числового списка:
#                     even_numbers = list(range(2, 11, 2))
#                     print(even_numbers)
#
#                out: [2, 4, 6, 8, 10]
#
# Простая статистика с числовыми списками:
#          Функции:  max(), min(), sum()
#
#              digits = [1, 2, 3, 4, 5, 6]
#              print(max(digits))
#              print(min(digits))
#              print(sum(digits))
#
#         out: 6
#              1
#              21
#
#  List comprehension (Генератор списка):
#  Построение списка квадратов чисел от 1 до 10:

#           squares = [value**2 for value in range(1, 11)]
#           print(squares)
#
#      out: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
#
#      Вместо:  squares = []
#               for i in range(1, 11):
#                    squares.append(i**2)
#               print(squares)
#
# Срезы (slice) - позволяют обратиться к конкретным множествам элементов в списке.
#
#                      players = ['charlie', 'martina', 'misha', 'flora', 'eli']
#                      print(players[0:3])   - срез с 0 по 2ой включительно    ['charlie', 'martina', 'misha']
#                      print(players[:4])     - с 0 по 3тий вкл                ['charlie', 'martina', 'misha', 'flora']
#                      print(players[2:])   - с 2го до конца                   ['misha', 'flora', 'eli']
#                      print(players[-3:])  - 3ий с конца до конца             ['misha', 'flora', 'eli']
#
#         Пребор содержимого среза:
#
#                       players = ['charlie', 'martina', 'misha', 'flora', 'eli']
#                       for player in players[0:3]:
#                           print(player.title())
#
#                  out: Charlie
#                       Martina
#                       Misha
#
#          Копирование списка срезом:

#              список[:] - создает полный срез с первого до последнего элемента (КОПИРОВАНИЕ ПОЛНОГО СПИСКА)
#
#  Кортеж (tuple) - неизменяемый список элементов. Можно обращаться к отдельным элементам кортежа.
#
#           имя_кортежа = (n1, n2, . . . n)
#           print(имя_кортежа[0])
#
#         - Перебор всех значений кортежа:
#                            for переменная in имя_кортежа:
#                                print(переменная)
#
#         - Замена кортежа (переопределение кортежа):
#                        kortej = (10, 20)
#                        print(kortej)

#                   out: (10, 20)

#                        kortej = (30, 40)
#                        print(kortej)
#
#                   out: (30, 40)
#
#  Рекомендации по написанию кода (PEP8):
#                   ОТСТУПЫ - 4 пробела
#                   ДЛИНА СТРОКИ - 79 символа на строку
#
#
#   КЛЮЧЕВОЕ СЛОВО "in" - присутствует ли значение в списке;       not in   - отсутствует ли значение в списке
#                    Пример:     toppings = ['mushrooms', 'onion', 'pineapple']
#                                print('mushrooms' in toppings)
#                                print('pepperoni' in toppings)
#
#                          out:  True
#                                False
#
#   Логические выражения предоставляют эффективные средства для контроля состояния программы или определенного условия,
# играющего важную роль в программе.
#
#
#   Чтобы проверить наличие элементов в списке , существует конструкция :
#
#                     if наименование_списка:
#
#               out:  True - если список не пустой
#                     False  - если список пустой
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#    ФУНКЦИИ - именованный блок кода, предназначений для выполнения одной конкретной задачи.
#
#     Синтаксис:     def наименование_функции(параметры):       # определение функции
#                       тело функции
#
#                   наименование_функции(аргументы)             # вызов функции
#
#      Параметр - условные данные, необходимые для выполнения ф-ии
#      Аргумент - конкретная информация , переданная при вызове функции
#
#
#      Аргументы:
#
#      1)Позиционные - перечисляются в порядке, точно соответствующему порядку записи параметров.
#                         def describe_pet(type_, nickname):
#                             """Print info about pet"""
#                             print('My ' + type_ + "'s name is " + nickname.title() + '.')
#
#
#                        describe_pet('parrot', 'kesha') # позиционные аргументы
#
#
#      2)Именованный - представляет пару <ключ-значение>, передаваемую ф-ии (порядок не важен)
#
#                        describe_pet(nickname='kirill', type_='rat') # именованные аргументы
#
#      2.1) Значения по умолчанию:
#
#          def describe_pet(nickname, type_ = 'dog'):  #значение параметра type_ = 'dog' - по умолчанию(если не задано)
#              """Print info about pet"""
#              print('My ' + type_ + "'s name is " + nickname.title() + '.')
#
#
#          describe_pet('barky')
#
#      2.2) Необязательные аргументы:
#
#                    def describe_pet(nickname, type_, color=''):
#                        """Print info about pet"""
#                        if color:
#                            print('My ' + type_ + "'s name is " + nickname.title() + '.')
#                            print("It's color is " + color + '.\n')
#                        else:
#                            print('My ' + type_ + "'s name is " + nickname.title() + '.\n')
#
#
#                    describe_pet('barky', 'dog')
#                    describe_pet('barky', 'dog', 'white')
#
#               out: My dog's name is Barky.
#
#                    My dog's name is Barky.
#                    It's color is white.
#
#
#
#
#
#       return - команда передает значение из ф-ии в строку, в которой эта ф-ия была вызвана ??????
#
#       - вызывая ф-ию, которая возвращает значение, необходимо предоставить переменную, в которой должно храниться
#    возвращаемое значение.
#
#       Пример:           def get_formatted_name(first_name, last_name):
#                            full_name = first_name + ' ' + last_name
#                            return full_name.title()
#
#
#                         person = get_formatted_name('daniel', 'marin')
#                         print(person)
#
#
#    ЦИКЛ while , когда необходимо из одного списка переместить элемент в другой список, при этом удалив его:
#
#                 def printing_models(unprinted_designs, completed_models):
#                 while unprinted_designs:                                  # пока список НЕ ПУСТОЙ , цикл будет True!
#                    current_design = unprinted_designs.pop()
#                    print(current_design.title() + ' is printing . . . ')
#                    completed_models.append(current_design)
#
#
#                 def show_completed_models(completed_models):
#                 print('Here are completed models:')
#                 for model in completed_models:
#                 print(model.title())
#
#
#                 unprinted = ['case', 'robot', 'frame']
#                 completed = []
#                 printing_models(unprinted, completed)
#                 show_completed_models(completed)
#
#    Чтобы оставить ОРИГИМНАЛ СПИСКА unprinted, можно передать функции его СРЕЗ:
#
#            Синтаксис: имя_функции(имя_списка[:])     - создает копию списка без изменения оригинала
#
#            Пример: unprinted = ['case', 'robot', 'frame']
#                    completed = []
#                    printing_models(unprinted[:], completed)
#                    show_completed_models(completed)
#                    print(unprinted)
#
#            out:    ['case', 'robot', 'frame']     - оригинальный список СОХРАНЯЕТСЯ!
#
#
#     Передача ПРОИЗВОЛЬНОГО набора АРГУМЕНТОВ:
#
#            Синтаксис:   def имя_функции(*имя_параметра):    # *параметр - создает пустой КОРТЕЖ с ИМЕНЕМ ПАРАМЕТРА и
#  упаковывает в него все полученные значения
#
#    Если нужно использовать ПОЗИЦИОННЫЙ (и (или) именованный) + ПРОИЗВОЛЬНЫй , необходимо, чтобы произвольный аргумент
#  стоял на ПОСЛЕДНЕМ МЕСТЕ.
#
#            Синтаксис:   def имя_функции(имя_поз_параметра, *имя_произвол_параметра):
#
#    Передача ПРОИЗВОЛЬНОГО набора ИМЕНОВАННЫХ АРГУМЕНТОВ (ключ-значение):
#
#            Синтаксис:   def имя_функции(имя_поз_параметра, **имя_произвол_именован_параметра):
#
#            Пример:    def built_profile(first, last, **user_info):
#                           profile = {}
#                           profile['first_name'] = first.title()
#                           profile['last_name'] = last.title()
#                           for key, value in user_info.items():
#                               profile[key] = value.title()
#                           return profile
#
#
#                           user_profile = built_profile('albert', 'einstein', location='princeton', field='physics')
#                           print(user_profile)
#
#                out:   {'first_name': 'Albert', 'last_name': 'Einstein', 'location': 'Princeton', 'field': 'Physics'}
#
#
#
#      МОДУЛИ:
#           1.1 Импортирование ВСЕГО МОДУЛЯ:
#
#           Синтаксис вызова модуля:        import имя_файла
#                                           имя_файла.имя_функции_в_файле(параметры)
#
#           Пример: pizza.py
#                   def making_pizza(size, *toppings):
#                       print('\nMaking pizza ' + str(size) + '-inch with following toppings:')
#                       for topping in toppings:
#                           print('-' + topping)
#
#                   making_pizzas.py           # Вызов модуля и функций внутри модуля
#                   import pizza
#                   pizza.making_pizza(13, 'pepperoni')
#                   pizza.making_pizza(16, 'extra_cheese', 'salami', 'mushrooms')
#
#           1.2 Можно ипортировать конкретную ф-ию из модуля:
#
#                     Синтаксис:       from имя_модуля import имя_функции
#
#                     Пример:         import pizza import making_pizza
#                                     making_pizza(13, 'pepperoni')
#                                     making_pizza(16, 'extra_cheese', 'salami', 'mushrooms')
#
#           1.3 Можно ипортировать любое кол-во ф-ий из модуля:
#
#                     Синтаксис:       from имя_модуля import имя_функции_0, имя_функции_1, имя_функции_2....
#
#        - Имя импортируемой ФУНКЦИИ можно заменить коротким уникальным ПСЕВДОНИМОМ (alias):
#
#                     Синтаксис:       from имя_модуля import имя_функции as имя_псевдонима
#
#                      Пример:         import pizza import making_pizza as mp
#                                      mp(13, 'pepperoni')
#                                      mp(16, 'extra_cheese', 'salami', 'mushrooms')
#
#         - Имя МОДУЛЯ можно заменить коротким уникальным ПСЕВДОНИМОМ :
#
#                   Синтаксис:       from имя_модуля as имя_псевдонима
#
#                   Пример:         import pizza as p
#                                   p.making_pizza(13, 'pepperoni')
#                                   p.making_pizza(16, 'extra_cheese', 'salami', 'mushrooms')
#
#
#           1.4 Импортирование ВСЕХ ФУНКЦИЙ МОДУЛЯ (копирование):
#
#                  Синтаксис:       from имя_модуля import *
#
#                   Пример:         from pizza import *
#                                   making_pizza(13, 'pepperoni')
#                                   making_pizza(16, 'extra_cheese', 'salami', 'mushrooms')
#



#     Импортирование ОДНОГО КЛАССА из МОДУЛЯ:
#                                   from имя_файла(без .ру) import имя_класса(Car)
#
#                    Пример:      -создаем файл my_car.py
#
#                                  from car_class_import import Car      # импортируем класс
#                                  my_new_car = Car('audi', 'a4', 2016)     # Создаем экземпляр
#                                  print(my_new_car.get_descriptive_name())   # Выводим результат метода

#                                  my_new_car.odometer_reading = 23  # Выводим результат метода
#                                  my_new_car.read_odometer()        # Выводим результат метода
#
#
#     Хранение НЕСКОЛЬКИХ КЛАССОВ В МОДУЛЕ:
#                   -В модуле может храниться сколько угодно классов, но они должны быть связаны
#
#                                   from имя_файла(без .ру) import имя_класса_потомка(Car)
#
#                   Пример:       -создаем файл my_electric_car
#
#                                   from car_class_import import ElectricCar

#                                   tesla_car = ElectricCar('tesla', 'model S', 2020)
#                                   print(tesla_car.get_descriptive_name())
#                                   tesla_car.battery_size.describe_battery()
#                                   tesla_car.battery_size.get_range()
#
#     Импортирование НЕСКОЛЬКИХ КЛАССОВ ИЗ МОДУЛЯ:
#
#                                       from имя_файла(без .ру) import имя_класса_№1, имя_класса_№2
#
#                    Пример:       -создаем файл my_cars:

#                                   from car_class_import import Car, ElectricCar

#                                   my_beetle = Car('volkswagen', 'beetle', 2016)
#                                   print(my_beetle.get_descriptive_name())

#                                   my_tesla = ElectricCar('tesla', 'model s', 2018)
#                                   print(my_tesla.get_descriptive_name())
#
#
#      Импортирование ВСЕГО МОДУЛЯ:
#
#                                   import имя_файла(без .ру)
#
#                   Пример:         -создаем файл my_cars:
#
#                                   import car_class_import    # файл с классами
#
#                                    ТОЧЕЧНАЯ ЗАПИСЬ: имя_модуля.имя_класса(аргументы)
#                                   my_beetle = car_class_import.Car('volkswagen', 'beetle', 2016)
#                                   print(my_beetle.get_descriptive_name())
#
#                                   my_tesla = car_class_import.ElectricCar('tesla', 'model s', 2018)
#                                   print(my_tesla.get_descriptive_name())
#
#      Импортирование ВСЕХ КЛАССОВ ИЗ МОДУЛЯ:
#
#                                   import имя_модуля(файла) import *
#
#      Импортирование МОДУЛЯ В МОДУЛЬ:
#                       -может понадобиться , когда один класс модуля зависит от класса другого модуля
#
#                         from имя_модуля_№1 import имя_класса_№1
#                         from имя_модуля_№2 import имя_класса_№2
#
#               Пример:     -Разделим классы Car и ElectricCar, Battery на разные модули
#
#                           from car_module_import import Car
#                           from electric_car_module_import import ElectricCar
#
#       Стандартная библиотека Python:
#
#    from collections import OrderedDict
#    - сохраняет исходный порядок добавлени (как список) и связывает 2 вида информации (ключ-значение (словарь)).
#
#
#               Пример:         from collections import OrderedDict     # импортируем класс из модуля
#                               favourite_languages = OrderedDict()     # СОЗДАЕТСЯ ЭКЗЕМПЛЯР КЛАССА OrderedDict,
#                       который сохраняется в favourite_languages!
#
#                               favourite_languages['kirill'] = 'js'
#                               favourite_languages['phil'] = 'py'
#                               favourite_languages['sarah'] = 'c'
#                               favourite_languages['edward'] = 'ruby'
#                               favourite_languages['jen'] = 'py'
#                               for name, lang in favourite_languages.items():
#                                   print(name.title() + "'s favourite language is " + lang.title() + "!") #по порядку!

#       10. Файлы и исключения:
#               Исключения - специальные объекты, которые создаются для управления ошибками.
#               - Исключения повышают устойчивость программ при работе с некорректными данными.
#
#           Чтение из файла:
#                   1)Чтение всего файла:
#                       with open('имя_файл.txt') as имя_переменной_№1:
#                       - Ф-ия open() ищет 'имя_файл.txt' в каталоге с файлом.PY, возвращает объект, представляющий файл
#                       'имя_файл.txt' и сохраняет в имя_переменной_№1.
#                       - Ключевое слово with - закрывает файл, когда пропадает надобность в файле.
#                           имя_переменной_№2 = имя_переменной_№1.read()
#                           - Метод read() - счмтывает и сохраняет содержимое в одной плинной строке в имя_переменной_№2
#                           print(имя_переменной_№2)
#                           - В конце вывода файла будет пустая строка, для того, чтобы ее убрать необходимо воспользо-
#                           ваться методом .rstrip() - Удаляет все пропуски в конце строки.
#
#                   Пример:  создадим файл pi_digits.txt
#
#                               3.1415926535
#                                 8979323846
#                                 2643383279
#
#                              with open('pi_digits.txt') as file_object:
#                                  content = file_object.read()
#                                  print(content)
#           Пути к файлам:
#
#                   1)Относительный путь:
#
#                   Пример: file_path = 'text_files/pi.txt'  # ищет относительно каталога, где содержится файл .ру
#                           with open(file_path) as file_object:
#                           content = file_object.read()
#                           print(content)
#
#                   2)Абсолютный путь:
#
#                   Пример: file_path = 'C:/Users/RudavinAS/PycharmProjects/other_files/pi2.txt'
#                           with open(file_path) as file_object:
#                               content = file_object.read()
#                               print(content)
#
#           Чтение по строкам:
#
#                   Пример: filename = 'pi_digits.txt'
#
#                           with open(filename) as file_object:
#                               for line in file_object:
#                                   print(line.rstrip())
#
#           Создание списка строк по содержимому файла:    (Работа с содержимым файла:)
#
#                      Пример:     file_name = 'pi_digits.txt'
#
#                                  with open(file_name) as file_object:
#                                    lines = file_object.readlines()    # метод .readlines() - последовательно читает
#                                               каждую строку из файла и сохраняет ее в список, а список в переменную, с
#                                               которой можно работать после завершения блока with.
#                                    pi_string = ''
#                                    for line in lines:
#                                        pi_string += line.strip()  # удаляется символ новой строки и пробелы
#
#                                    print(pi_string)               #  3.141592653589793238462643383279
#                                    print(len(pi_string))          #  36
#
#  Запись в пустой файл (строковые данные):
#       Синтаксис: file_name = 'filename.txt'
#                  with open(file_name, 'w') as f_object:
#                      f_object.write('some text\n')   - метод .write для записи строки в файл
#                      f_object.write('more text\n')  - если требуется записать больше 1 строки
#
#
#       Второй аргумент функции open() (режимы) : 'w' - запись, 'r' - чтения, 'a' - присоединения, 'r+' - чтение+запись
#
#       - Если файл, открываемый при записи еще не создан, Python создаст его автоматически
#       - Если файл существует, то Python уничтожит его содержимое перед возвращением
#
#       \t - табуляция
#       \n - переход на новую строку
#
#   Присоединение данных к файлу:
#           Синтаксис: file_name = 'filename.txt'
#                      with open(file_name, 'a') as f_object:  - для добавление текста к файлу
#                          f_object.write('some additional text.\n') - добавочный текст
#
#   Исключения (блок try-except):
#               - объект для управления ошибками, возникающими в ходе выполнения программы.
#               - если есть код обработки исключения, то во время ошибки, выполнение программы продолжится.
#               - вывод понятного сообщения об ошибке.
#
#   - ZeroDivisionError (Ошибка деления на 0)
#
#   Блоки try-except-else (блок для обработки исключения ZeroDivisionError):
#               -Если предполагается, что может произойти ошибка.
#    Использование исключений для предотвращения аварийного завершения программы:
#               Пример:
#                           print("Give me two numbers, and I'll divide them.")
#                           print("Enter 'q' ti quit.")
#
#                           while True:
#                               first_number = input("\nFirst number: ")
#                               if first_number == 'q':
#                                   break
#                               second_number = input("\nSecond number: ")
#                               if second_number == 'q':
#                                   break
#                               try:                # - Если try выполнен успешно, except - пропускается.
#                                   answer = int(first_number) / int(second_number)
#                               except ZeroDivisionError:      # Как следует поступать при возникновении ошибки
#                               ZeroDivisionError
#                                   print("You can't divide by 0!")  # Вместо ошибки выполняет код.
#                               else:                # Если try: - успешно, то код продолжается в else:
#                                   print(answer)
#
#   - FileNotFoundError:
#               Пример: filename = 'alice.txt'
#
#                       try:
#                           with open(filename) as file_object:    # open порождает ошибку
#                           content = file_object.read()  # загружает весь файл в переменную content (1 длинная строка)
#                       except FileNotFoundError:
#                           print("Sorry, this file: " + filename + " doesn't exist")
#                       else:
#                       # Подсчет приблизительного кол-ва слов в файле
#                            words = content.split()  # разделяем строку на элементы списка
#                            print("The file " + filename.title() + " has about " + str(len(words)) + " words")
#
#   Анализ текса:
#                   имя_переменной_строки.split() - метод разделяет строку на части по всем позициям, в которых
#                   обнаружит пробел, и сохраняет все части строки в элементах списка.
#
#                   Пример: title = 'Alice in Wonderland'
#                           print(title.split())
#
#                      out: ['Alice', 'in', 'Wonderland']

#   Работа с несколькими файлами (Ошибки без уведолмения пользователя pass) :
#
#               Пример: def count_words(filename):    # Помещаем код в функцию
#                       """Подсчет приблизительного количества строк в файле"""
#                           try:
#                               with open(filename) as f_object:
#                               content = f_object.read()
#                           except FileNotFoundError:
#                               print('Sorry, the file: ' + filename + " does not exist")
#                               #pass         # Команда ПРОПУСКА ОШИБКИ
#                           else:
#                               words = content.split()
#                               num_words = len(words)
#                               print("This file " + filename + "has about " + str(num_words) + " words.")
#
#
#                       filenames = ['theft.txt', 'shaming.txt', 'fly.txt', 'alice.txt'] # Помещаем названия в список
#                       for filename in filenames:
#                          count_words(filename)   # Запускаем цикл и выводим функцию по-очереди для каждого эл. списка.

#   Сохранение данных (JavaScript Object Notation):
#           Модуль json - обеспечивает запись простых структур данных в файл и загрузку данных из файла при запуске.
#
#       Функции json.dump() и json.load() :
#               json.dump() - получает 2 аргумента: сохраняемые данные и объект файла, используемый для хранения
#
#               Пример : import json
#
#                        numbers = [2, 3, 5, 7, 11, 13]
#
#                        filename = 'numbers.json'
#                        with open(filename, 'w') as f_obj:
#                            json.dump(numbers, f_obj)
#
#               Пример : import json
#
#                        filename = 'numbers.json'
#
#                        with open(filename) as f_obj:
#                            numbers = json.load(f_obj)     # инфомация из файла сохраняется в переменную filename
#                            print(numbers)
